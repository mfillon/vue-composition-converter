<template>
  <div class="student-exam-stats">
    <div class="title font-700-17-20">
      <svgicon
        class="icon"
        name="edit-2-line"
        original
      />
      <span v-text="$t(`${localePrefix}.title`)"/>
    </div>
    <div class="content-wrap">
      <m-preloader
        v-if="loading"
        position="absolute"
      />
      <div class="pie-cards">
        <v-pie-card
          :percent="totalDoneExamPercent"
          :color="totalDoneExamColor"
          :text="$t(`${localePrefix}.doneExamPercent`)"
        />
      </div>
      <template v-if="!isEpmtyCheckedItems">
        <div class="title-completed">
          {{ $t(`${localePrefix}.completedTitle`) }}
        </div>
        <component
          :is="completedDynamicComponent"
          :items="examsStatsChecked"
        />
      </template>
      <template v-if="!isEmptyAvailableItems">
        <div class="title-available">
          {{ $t(`${localePrefix}.availableTitle`) }}
        </div>
        <component
          :is="availableAndFutureDynamicComponent"
          :items="examsStatsAvailable"
          :forced-disabled="!!actionExamLoading"
          opened
          @start="handleActionStartExam"
          @continue="handleActionContinueExam"
        />
      </template>
      <template v-if="isEmptyAllItems || !isEmptyFutureItems">
        <div class="title-future">
          {{ $t(`${localePrefix}.futureTitle`) }}
        </div>
        <component
          :is="availableAndFutureDynamicComponent"
          :items="examsStatsFuture"
          :loading="loading"
          forced-disabled
        />
      </template>
    </div>
    <v-modal
      :is-open="isOpenStartExam"
      @close="closeModalStartExam"
    >
      <modal-start-exam
        v-if="selectedExamItem"
        :duration="selectedExamItem.duration"
        :count="selectedExamItem.taskQuantity"
        :loading="!!actionExamLoading"
        @close="closeModalStartExam"
        @start="handleModalStartExam"
      />
    </v-modal>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Watch } from 'vue-property-decorator';
import VPieCard from '@ui/VPieCard.vue';
import { store } from '@/store';
import { RouteName } from '@/enums/router';
import ModalStartExam from '@/components/pages/student/common/modals/ModalStartExam.vue';
import { ShowSolutionColors } from '@/store/modules/student/coursesGoals/types';
import type { ExamsStatsAvailableOrFuture } from '@/store/modules/student/coursesGoals/types';

type RouteToExamParams = {
  lessonId: number;
  subjectId: number;
}

const coursesGoalsStore = store.student.modules.coursesGoals;

@Component({
  components: {
    VPieCard,
    ModalStartExam,
  },
})
export default class StudentExamsStats extends Vue {
  localePrefix = 'student.progress.examStats';
  loading = 0;
  actionExamLoading = 0;

  isOpenStartExam = false;
  selectedExamItem: ExamsStatsAvailableOrFuture | null = null;

  get studentId() {
    return store.auth.getters.authUser.id;
  }

  get currentStudentGroupId() {
    return store.root.state.currentStudentGroupId;
  }

  get examsStats() {
    return coursesGoalsStore.getters.examsStats;
  }

  get totalDoneExamPercent() {
    return this.examsStats?.totalExamSubjectPercent;
  }

  get examsStatsChecked() {
    return this.examsStats?.checked ?? [];
  }

  get examsStatsAvailable() {
    return this.examsStats?.available ?? [];
  }

  get examsStatsFuture() {
    return this.examsStats?.future ?? [];
  }

  get totalDoneExamColor() {
    if (this.totalDoneExamPercent == null) return;

    if (this.totalDoneExamPercent <= 50) return ShowSolutionColors.RED;
    if (this.totalDoneExamPercent > 50 && this.totalDoneExamPercent <= 80) return ShowSolutionColors.YELLOW;
    if (this.totalDoneExamPercent > 80) return ShowSolutionColors.GREEN;

    return ShowSolutionColors.BLUE;
  }

  get isMobile() {
    return this.$adaptive.is.md;
  }

  get isEpmtyCheckedItems() {
    return !this.examsStatsChecked.length;
  }

  get isEmptyAvailableItems() {
    return !this.examsStatsAvailable.length;
  }

  get isEmptyFutureItems() {
    return !this.examsStatsFuture.length;
  }

  get isEmptyAllItems() {
    return this.isEpmtyCheckedItems
      && this.isEmptyAvailableItems
      && this.isEmptyFutureItems;
  }

  get completedDynamicComponent() {
    return this.isMobile
      ? () => import('./completed/StudentExamsStatsCompletedMobile.vue')
      : () => import('./completed/StudentExamsStatsCompletedDesktop.vue');
  }

  get availableAndFutureDynamicComponent() {
    if (this.isEmptyAllItems) {
      return () => import('./common/StudentExamsStatsEmpty.vue');
    }

    return this.isMobile
      ? () => import('./availableAndFuture/StudentExamsStatsAvailableAndFutureMobile.vue')
      : () => import('./availableAndFuture/StudentExamsStatsAvailableAndFutureDesktop.vue');
  }

  @Watch('currentStudentGroupId', { immediate: true })
  onChangeCurrentStudentGroupId() {
    this.loadExamsStats();
  }

  closeModalStartExam() {
    this.isOpenStartExam = false;
    this.selectedExamItem = null;
  }

  handleActionStartExam(item: ExamsStatsAvailableOrFuture) {
    this.selectedExamItem = item;
    this.isOpenStartExam = true;
  }

  handleModalStartExam() {
    this.startExam();
  }

  handleActionError(text: string) {
    this.$mNotify({
      title: this.$t('common.error'),
      text,
    });
  }

  pushToExam({ lessonId, subjectId }: RouteToExamParams) {
    return this.$router.push({
      name: RouteName.LESSON_EXAM,
      params: {
        lessonId: String(lessonId),
        subjectId: String(subjectId),
      },
    });
  }

  async loadExamsStats() {
    if (this.studentId == null || this.currentStudentGroupId == null) return;

    this.loading++;

    const err = await coursesGoalsStore.dispatch('loadExamsStats', {
      studentId: this.studentId,
      groupId: this.currentStudentGroupId,
    });

    if (err) {
      this.handleActionError(this.$t(`${this.localePrefix}.errorLoadExamsStats`));
    }

    this.loading--;
  }

  async startExam() {
    if (this.actionExamLoading || this.selectedExamItem == null) return;

    this.actionExamLoading++;

    const examParams = {
      subjectId: this.selectedExamItem.id,
      lessonId: this.selectedExamItem.lessonId,
    };

    const err = await coursesGoalsStore.dispatch('startExam', examParams);

    if (err) {
      this.handleActionError(this.$t(`${this.localePrefix}.errorStartExam`));
    } else {
      await this.pushToExam(examParams);
      this.closeModalStartExam();
    }

    this.actionExamLoading--;
  }

  async handleActionContinueExam({ id, lessonId }: ExamsStatsAvailableOrFuture) {
    this.actionExamLoading++;

    await this.pushToExam({
      subjectId: id,
      lessonId,
    });

    this.actionExamLoading--;
  }
}
</script>

<style lang="scss" scoped>
.student-exam-stats {
  .title {
    display: flex;
    align-items: center;
    gap: 7px;
    color: $simple-text;
  }

  .content-wrap {
    position: relative;
  }

  .title-completed,
  .title-available,
  .title-future {
    border-radius: 4px;
    margin-bottom: 16px;
    padding: 8px 12px;
    font-weight: 500;
    font-size: 13px;
    line-height: 14px;
  }

  .title-available,
  .title-future {
    margin-top: 24px;
  }

  .title-completed {
    background : $green-50;
  }

  .title-available {
    background: $m-blue-50;
  }

  .title-future {
    background: $neutral-100;
  }

  .icon {
    min-width: 18px;
  }

  .pie-cards {
    display: flex;

    @include media-down(sm) {
      flex-direction: column;
    }
  }

  .title,
  .pie-cards {
    margin-bottom: 16px;
  }
}
</style>
