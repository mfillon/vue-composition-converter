<template>
  <div class="general-indicators-for-past-lessons">
    <m-preloader
      v-if="loading"
      position="absolute"
    />
    <v-table
      :columns="columns"
      :items="items"
    >
      <template #cell-testsSolved="{ item }">
        <percent-state
          :percent="item.testsSolved"
          :is-empty="isEmptyPercentState(item.testsSolved)"
          justify-center
        />
      </template>
      <template #cell-testsSolvedWrong="{ item }">
        <percent-state
          :percent="item.testsSolvedWrong"
          :is-empty="isEmptyPercentState(item.testsSolvedWrong)"
          :calc-matcher="calcTestsSolvedWrongMatcher"
          justify-center
        />
      </template>
      <template #cell-showAnswer="{ item }">
        <percent-state
          :percent="item.showAnswer"
          :is-empty="isEmptyPercentState(item.showAnswer)"
          :calc-matcher="calcShowAnswerMatcher"
          justify-center
        />
      </template>
      <template #cell-solvedType6="{ item }">
        <percent-state
          :percent="item.solvedType6"
          :is-empty="isEmptyPercentState(item.solvedType6)"
          justify-center
        />
      </template>
    </v-table>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Watch } from 'vue-property-decorator';
import VTable from '@ui/VTable/VTable.vue';
import PercentState from '@/components/pages/teacher/common/PercentState.vue';
import { store } from '@/store';
import type { VTableColumns } from '@ui/VTable/types';
import type { PercentStateCircleColorMatcher } from '@/types/components';
import type { GeneralIndicators } from '@/store/modules/studentProfile/types';

const studentProfileStore = store.studentProfile;

type GeneraIndicatorsTableColumns = VTableColumns<keyof GeneralIndicators>;

@Component({
  components: {
    VTable,
    PercentState,
  },
})
export default class GeneraIndicatorsForPastLessons extends Vue {
  loading = false;

  calcTestsSolvedWrongMatcher: PercentStateCircleColorMatcher = {
    red: p => p >= 61,
    orange: p => p >= 31 && p <= 60,
    green: p => p <= 30,
  };

  calcShowAnswerMatcher: PercentStateCircleColorMatcher = {
    red: p => p >= 61,
    orange: p => p >= 31 && p <= 60,
    green: p => p <= 30,
  };

  get studentId() {
    return +this.$route.params.studentId;
  }

  get groupId() {
    return +this.$route.params.groupId;
  }

  get generalIndicators() {
    return studentProfileStore.getters.generalIndicators;
  }

  get columns(): GeneraIndicatorsTableColumns {
    return [
      {
        key: 'testsSolved',
        title: this.getTranslation('homeworkSolved'),
      },
      {
        key: 'testsSolvedWrong',
        title: this.getTranslation('numberOfTestsSolvedWrong'),
      },
      {
        key: 'showAnswer',
        title: this.getTranslation('usageOfSeeAnswerBtn'),
      },
      {
        key: 'solvedType6',
        title: this.getTranslation('solvedTasksWithComprehensiveAnswer'),
      },
    ];
  }

  get items() {
    if (!this.generalIndicators) return [];

    return [this.generalIndicators];
  }

  @Watch('groupId', { immediate: true })
  watchGroupId() {
    this.loadGeneralIndicators();
  }

  isEmptyPercentState(p: number | null) {
    return p == null;
  }

  async loadGeneralIndicators() {
    if (this.studentId == null || this.groupId == null) return;

    this.loading = true;

    try {
      await studentProfileStore.dispatch('loadGeneralIndicators', {
        studentId: this.studentId,
        groupId: this.groupId,
      });
    } catch {
      this.$mNotify({
        title: this.$t('common.error'),
        text: this.getTranslation('failedToLoadMainCourseIndicators'),
      });
    } finally {
      this.loading = false;
    }
  }

  getTranslation(path: string) {
    const prefix = 'teacher.studentInfo.profileApp.homework.';
    return this.$t(`${prefix}${path}`);
  }
}
</script>

<style lang="scss" scoped>
.general-indicators-for-past-lessons {
  position: relative;

  &::v-deep .v-table {
    &-header-cell {
      width: 25%;
    }

    &-cell {
      text-align: center;
    }
  }
}
</style>
