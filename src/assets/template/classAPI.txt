<template>
  <m-infinite-scroll
    class="infinite-scroll-table"
    :fetch-next-function="showNext"
    :count-next="countNext"
  >
    <m-table
      class="infinite-scroll-table__table"
      :headers="headers"
      :items="items"
      :total="total"
      :bordered="bordered"
    >
      <template
        v-for="(_, slot) of $scopedSlots"
        #[slot]="scope"
      >
        <slot
          :name="slot"
          v-bind="scope"
        />
      </template>
    </m-table>
    <div
      v-if="countNext && loading"
      class="infinite-scroll-table__next"
    >
      <loading-spinner
        v-if="loading"
        class="infinite-scroll-table__loader"
      />
    </div>
  </m-infinite-scroll>
</template>

<script lang="ts">
import { Vue, Component, Prop } from 'vue-property-decorator';
import LoadingSpinner from '@/components/LoadingSpinner.vue';

@Component({
  components: {
    LoadingSpinner,
  },
})
export default class InfiniteScrollTable extends Vue {
  @Prop({ type: Array, default: () => [] })
  readonly headers: unknown[];
  @Prop({ type: Array, default: () => [] })
  readonly items: unknown[];
  @Prop({ type: Object, default: null })
  readonly total: unknown;
  @Prop({ type: Boolean, default: false })
  readonly bordered: boolean;
  @Prop({ type: Function, required: true })
  readonly fetchFunction!: () => Promise<void>;
  @Prop({ type: Number, default: null })
  readonly currentPage: number;
  @Prop({ type: Number, default: null })
  readonly lastPage: number;

  loading = false;

  get countNext() {
    if (!(this.currentPage && this.lastPage)) {
      return null;
    }

    return this.lastPage - this.currentPage;
  }

  async showNext() {
    this.loading = true;

    try {
      await this.fetchFunction();
    } catch (err) {
      this.handleError({ err });
    } finally {
      this.loading = false;
    }
  }
}
</script>

<style lang="scss" scoped>
.infinite-scroll-table {
  &__table {
    width: 100%;
  }

  &__next {
    position: relative;
    width: 100%;
    height: 24px;
    margin: 24px 0;
  }

  &__loader {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translateX(-25px);
    transform: translateY(-25px);
  }
}
</style>
